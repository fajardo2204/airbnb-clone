---
interface Props {
  initialState?: boolean;
  onToggle?: (state: boolean) => void;
}

const { initialState = false, onToggle } = Astro.props;
let isToggled = initialState;

function handleToggle() {
  isToggled = !isToggled;
  if (onToggle) {
    onToggle(isToggled);
  }
}
---

<!--
<div class="flex items-center px-2">
  <button
    on:click={handleToggle}
    class={`relative w-8 h-4 flex items-center rounded-full p-1 cursor-pointer transition-colors duration-300 ${
      isToggled ? 'bg-blue-500' : 'bg-gray-400'
    }`}
    aria-label="Toggle button"
  >
    <div
      class={`w-3 h-3 rounded-full bg-white shadow-md transform transition-transform duration-300 ${
        isToggled ? 'translate-x-full' : 'translate-x-0'
      }`}
    ></div>
  </button>
</div>
-->

<div class="container">
  <input type="checkbox" id="check">
  <label for="check" class="toggle-button"></label>
</div>

<style>
  .container {
    width: 100%;
    height: 100%;
    background-color: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
    padding-left: 5px;
  }
  .toggle-button {
    background-color: #d2d2d2;
    width: 2rem;
    height: 1rem;
    border-radius: 200px;
    cursor: pointer;
    position: relative;
  }
  .toggle-button::before {
    position: absolute;
    content: '';
    background-color: #fff;
    width: 0.75rem;
    height: 0.75rem;
    border-radius: 200px;
    margin: 2px;
    transition: 0.2s;
  }
  input:checked + .toggle-button {
    background-color: #000000;
  }
  input:checked + .toggle-button::before {
    transform: translateX(1rem);
  }
  input {
    display: none;
  }
</style>